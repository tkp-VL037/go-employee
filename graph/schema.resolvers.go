package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	gm "github.com/tkp-VL037/go-employee/graph/model"
	"github.com/tkp-VL037/go-employee/proto"
)

// AddEmployee is the resolver for the addEmployee field.
func (r *mutationResolver) AddEmployee(ctx context.Context, input *gm.NewEmployee) (*gm.EmployeeResponse, error) {
	employee, err := r.EmployeeSrvClient.AddEmployee(ctx, &proto.AddEmployeeRequest{
		Name:     input.Name,
		Age:      int32(input.Age),
		Position: input.Position,
	})
	if err != nil {
		return nil, err
	}

	return &gm.EmployeeResponse{
		ID:        employee.Employee.Id,
		Name:      employee.Employee.Name,
		Age:       int(employee.Employee.Age),
		Position:  employee.Employee.Position,
		ViewCount: int(employee.Statistic.ViewCount),
	}, nil
}

// UpdateEmployeeDetail is the resolver for the updateEmployeeDetail field.
func (r *mutationResolver) UpdateEmployeeDetail(ctx context.Context, id string, input *gm.UpdateEmployee) (*gm.EmployeeResponse, error) {
	employee, err := r.EmployeeSrvClient.UpdateEmployee(ctx, &proto.UpdateEmployeeRequest{
		Id:       id,
		Name:     input.Name,
		Position: input.Position,
	})
	if err != nil {
		return nil, err
	}

	return &gm.EmployeeResponse{
		ID:        employee.Employee.Id,
		Name:      employee.Employee.Name,
		Age:       int(employee.Employee.Age),
		Position:  employee.Employee.Position,
		ViewCount: int(employee.Statistic.ViewCount),
	}, nil
}

// DeleteEmployee is the resolver for the deleteEmployee field.
func (r *mutationResolver) DeleteEmployee(ctx context.Context, id string) (bool, error) {
	_, err := r.EmployeeSrvClient.DeleteEmployee(ctx, &proto.DeleteEmployeeRequest{
		Id: id,
	})
	return err == nil, err
}

// GetEmployees is the resolver for the getEmployees field.
func (r *queryResolver) GetEmployees(ctx context.Context) ([]*gm.EmployeeResponse, error) {
	employees, err := r.EmployeeSrvClient.GetEmployees(ctx, &proto.NoParam{})
	if err != nil {
		return nil, err
	}

	employeeRes := make([]*gm.EmployeeResponse, len(employees.EmployeeResponse))
	for i, e := range employees.EmployeeResponse {
		employeeRes[i] = &gm.EmployeeResponse{
			ID:        e.Employee.Id,
			Name:      e.Employee.Name,
			Age:       int(e.Employee.Age),
			Position:  e.Employee.Position,
			ViewCount: int(e.Statistic.ViewCount),
		}
	}

	return employeeRes, nil
}

// GetEmployeeDetail is the resolver for the getEmployeeDetail field.
func (r *queryResolver) GetEmployeeDetail(ctx context.Context, id string) (*gm.EmployeeResponse, error) {
	_, err := r.EmployeeSrvClient.GetEmployeeDetail(ctx, &proto.GetEmployeeDetailRequest{
		Id: id,
	})
	if err != nil {
		return nil, err
	}

	// return &gm.EmployeeResponse{
	// 	ID:        employee.Employee.Id,
	// 	Name:      employee.Employee.Name,
	// 	Age:       int(employee.Employee.Age),
	// 	Position:  employee.Employee.Position,
	// 	ViewCount: int(employee.Statistic.ViewCount),
	// }, nil

	return &gm.EmployeeResponse{}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
